import subprocess as sb
import time

def Lvm():
    ch=input("Do you want to know the hard disk information:[Y/N]\n")
    if ch=="Y" or ch=="y":
        sb.call("fdisk -l",shell=True)
        time.sleep(2)

    hdname=input("\nEnter the hard disk name: \n")
    sb.call("pvcreate {}".format(hdname),shell=True)

    ch1=input("Do you want to see the physical volume info:[Y/N]\n")
    if ch1=="Y" or ch1=="y":
        sb.call("pvdisplay {}".format(hdname),shell=True)
        time.sleep(2)

    vname=input("Enter the vg name: \n")
    sb.call("vgcreate {} {}".format(vname,hdname),shell=True)

    ch2 = input("Do you want to see the volume group info:[Y/N]\n")
    if ch2 == "Y" or ch2 == "y":
        sb.call("vgdisplay {}".format(vname), shell=True)
        time.sleep(2)

    lv=input("Enter the name of lv: \n")
    size=input("Enter the size of lv: \n")
    sb.call("lvcreate --size {} --name {} {}".format(size,lv,vname),shell=True)

    ch3 = input("Do you want to see the lvm info:[Y/N]\n")
    if ch3 == "Y" or ch3 == "y":
        sb.call("lvdisplay {}/{}".format(vname,lv), shell=True)
        time.sleep(2)

    sb.getoutput("mkfs.ext4 /dev/{}/{}".format(vname,lv))

    dir=input("Enter the directory name: \n")
    sb.call("mkdir /{}".format(dir),shell=True)
    sb.call("mount /dev/{}/{}  /{}".format(vname,lv,dir),shell=True)
    time.sleep(1)

    ch4 = input("Do you want to see the hard disk info:[Y/N]\n")
    if ch4 == "Y" or ch4 == "y":
        sb.call("df -h", shell=True)

def increase():
    path=input("Enter the path of lv: \n")
    size1=input("Enter the size: \n")
    sb.call("lvextend --size +{} /dev/{}".format(size1,path),shell=True)
    sb.call("resize2fs {}".format(path),shell=True)
    sb.call("df -h",shell =True)

def decrease():
    m=input("Enter the mount point: \n")
    sb.call("umount {}".format(m),shell=True)
    vname=input("Enter the vg name:\n")
    lv=input("Enter the name of lv: \n")
    sb.call("e2fsck -f /dev/mapper/{}-{}".format(vname,lv),shell=True)
    sb.call("resize2fs /dev/mapper/{}-{}".format(vname,lv),shell=True)
    size2=input("Enter the size to be reduced: \n")
    sb.call("lvreduce --size -{} /dev/mapper/{}-{}".format(size2,vname,lv),shell=True)
    sb.call("mount /dev/{}/{}".format(vname,m),shell=True)


print("***LVM PARTITION***\n")
choice=input("\n 1.Create lvm\n 2.Extend the size of lvm\n 3.Decrease the size of lvm\n 4.To exit\n")

if '1' in choice:
    Lvm()
elif '2' in choice:
    ch5=input("Have you created lvm:[y/n]\n")
    if ch5=="y":
        increase()
    else:
        ch6=input("Would you like to create:[y/n]\n")
        if ch6=="y":
            Lvm()
        else:
            increase()
elif '3' in choice:
    ch7 = input("Have you created lvm:[y/n]\n")
    if ch7 == "y":
        decrease()
    else:
        ch8 = input("Would you like to create:[y/n]\n")
        if ch8 == "y":
            Lvm()
        else:
            decrease()
elif '4' in choice:
    print("Thank you")
    exit(1)
else:
    print("Not supported")
    exit()
